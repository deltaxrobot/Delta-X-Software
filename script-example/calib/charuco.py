import cv2
import numpy as np
import time

# ƒê·ªçc ·∫£nh
image = cv2.imread('charuco.jpg')

if image is None:
    print("Kh√¥ng th·ªÉ ƒë·ªçc file ·∫£nh charuco.jpg")
    exit()

# Gi·∫£m ƒë·ªô ph√¢n gi·∫£i c·ªßa ·∫£nh
image = cv2.resize(image, (0, 0), fx=0.5, fy=0.5)

# T·∫°o b·∫£n copy ƒë·ªÉ x·ª≠ l√Ω chessboard
image_chessboard = image.copy()

# T·∫°o dictionary v√† parameters
aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
parameters = cv2.aruco.DetectorParameters()

# T·∫°o detector
detector = cv2.aruco.ArucoDetector(aruco_dict, parameters)

# Ph√°t hi·ªán markers
corners, ids, rejectedImgPoints = detector.detectMarkers(image)

# V·∫Ω markers ƒë∆∞·ª£c ph√°t hi·ªán
if ids is not None:
    image_with_markers = cv2.aruco.drawDetectedMarkers(image, corners, ids)
    print(f"Ph√°t hi·ªán ƒë∆∞·ª£c {len(ids)} markers")

# V·∫Ω t·ªça ƒë·ªô t√¢m c·ªßa marker id = 0
for i in range(len(ids)):
    if ids[i] == 0:
        c = corners[i][0]
            center_x = int(c[:, 0].mean())
            center_y = int(c[:, 1].mean())
            cv2.circle(image_with_markers, (center_x, center_y), 10, (0, 0, 255), -1)
            print(f"T√¢m marker ID 0: ({center_x}, {center_y})")
else:
    image_with_markers = image
    print("Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c markers n√†o")

# ===================== CHESSBOARD DETECTION =====================
print("\n--- Nh·∫≠n di·ªán Chessboard ---")

# Chuy·ªÉn ·∫£nh sang grayscale ƒë·ªÉ ph√°t hi·ªán chessboard
gray = cv2.cvtColor(image_chessboard, cv2.COLOR_BGR2GRAY)

# ===================== T·ª∞ ƒê·ªòNG NH·∫¨N DI·ªÜN K√çCH TH∆Ø·ªöC CHESSBOARD =====================
print("üîç B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông nh·∫≠n di·ªán k√≠ch th∆∞·ªõc chessboard...")

# T·∫°o danh s√°ch k√≠ch th∆∞·ªõc th√¥ng minh - th·ª≠ c√°c k√≠ch th∆∞·ªõc ph·ªï bi·∫øn tr∆∞·ªõc
def generate_smart_sizes():
    """T·∫°o danh s√°ch k√≠ch th∆∞·ªõc ∆∞u ti√™n c√°c k√≠ch th∆∞·ªõc ph·ªï bi·∫øn"""
    # K√≠ch th∆∞·ªõc ph·ªï bi·∫øn nh·∫•t
    common_sizes = [
        (7, 7), (6, 8), (8, 6), (5, 7), (7, 5), (6, 6), (8, 8),
        (9, 7), (7, 9), (10, 8), (8, 10), (5, 8), (8, 5),
        (4, 6), (6, 4), (9, 9), (10, 10), (4, 4), (5, 5)
    ]
    
    # T·∫°o danh s√°ch ƒë·∫ßy ƒë·ªß cho c√°c k√≠ch th∆∞·ªõc c√≤n l·∫°i
    all_sizes = []
    for w in range(3, 13):  # Gi·∫£m range ƒë·ªÉ t·ªëi ∆∞u
        for h in range(3, 13):
            if (w, h) not in common_sizes:
                all_sizes.append((w, h))
    
    # K·∫øt h·ª£p: k√≠ch th∆∞·ªõc ph·ªï bi·∫øn tr∆∞·ªõc, sau ƒë√≥ l√† c√°c k√≠ch th∆∞·ªõc kh√°c
    return common_sizes + all_sizes

possible_sizes = generate_smart_sizes()
print(f"üìä S·∫Ω th·ª≠ {len(possible_sizes)} k√≠ch th∆∞·ªõc (∆∞u ti√™n k√≠ch th∆∞·ªõc ph·ªï bi·∫øn)...")

# L∆∞u tr·ªØ t·∫•t c·∫£ k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c
detected_results = []

# S·ª≠ d·ª•ng c√°c flags ƒë·ªÉ c·∫£i thi·ªán detection
flags = cv2.CALIB_CB_ADAPTIVE_THRESH + cv2.CALIB_CB_NORMALIZE_IMAGE + cv2.CALIB_CB_FAST_CHECK

print("üîé ƒêang qu√©t c√°c k√≠ch th∆∞·ªõc...")
start_time = time.time()
early_stop_threshold = 30  # N·∫øu t√¨m th·∫•y chessboard v·ªõi >= 30 corners, c√≥ th·ªÉ d·ª´ng s·ªõm

for i, size in enumerate(possible_sizes):
    if i % 25 == 0:  # Progress indicator
        print(f"   ƒê√£ th·ª≠ {i}/{len(possible_sizes)} k√≠ch th∆∞·ªõc...")
    
    ret_temp, corners_temp = cv2.findChessboardCorners(gray, size, flags)
    
    if ret_temp:
        # T√≠nh to√°n ch·∫•t l∆∞·ª£ng detection
        quality_score = len(corners_temp)  # C√≥ th·ªÉ c·∫£i thi·ªán th√™m v·ªõi c√°c metrics kh√°c
        detected_results.append({
            'size': size,
            'corners': corners_temp,
            'quality': quality_score,
            'total_corners': len(corners_temp)
        })
        print(f"‚úÖ T√¨m th·∫•y: {size} v·ªõi {len(corners_temp)} corners")
        
        # Early stopping n·∫øu t√¨m th·∫•y k·∫øt qu·∫£ r·∫•t t·ªët v√† ƒë√£ th·ª≠ √≠t nh·∫•t 5 k√≠ch th∆∞·ªõc
        if quality_score >= early_stop_threshold and i >= 5:
            print(f"üöÄ Early stopping: T√¨m th·∫•y chessboard ch·∫•t l∆∞·ª£ng cao ({quality_score} corners)")
            break
        
        # N·∫øu t√¨m th·∫•y 2 k√≠ch th∆∞·ªõc t·ªët trong top 15 (k√≠ch th∆∞·ªõc ph·ªï bi·∫øn)
        if len(detected_results) >= 2 and i < 15:
            # Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ n√†o >= 25 corners kh√¥ng
            best_so_far = max(r['quality'] for r in detected_results)
            if best_so_far >= 25:
                print(f"üéØ Early stopping: T√¨m th·∫•y {len(detected_results)} k·∫øt qu·∫£ t·ªët trong top k√≠ch th∆∞·ªõc ph·ªï bi·∫øn")
                break
        
        # N·∫øu t√¨m th·∫•y 3 k√≠ch th∆∞·ªõc v√† ƒë√£ th·ª≠ √≠t nh·∫•t 20 k√≠ch th∆∞·ªõc
        if len(detected_results) >= 3 and i >= 20:
            print(f"üéØ T√¨m th·∫•y ƒë·ªß k√≠ch th∆∞·ªõc ({len(detected_results)} k·∫øt qu·∫£), d·ª´ng t√¨m ki·∫øm")
            break

# Ch·ªçn k·∫øt qu·∫£ t·ªët nh·∫•t
ret = False
corners = None
chessboard_size = None

if detected_results:
    # S·∫Øp x·∫øp theo ch·∫•t l∆∞·ª£ng (s·ªë corners nhi·ªÅu nh·∫•t)
    detected_results.sort(key=lambda x: x['quality'], reverse=True)
    
    best_result = detected_results[0]
    ret = True
    corners = best_result['corners']
    chessboard_size = best_result['size']
    
    detection_time = time.time() - start_time
    
    print(f"\nüéØ K·∫æT QU·∫¢ T·ª∞ ƒê·ªòNG NH·∫¨N DI·ªÜN:")
    print(f"   ‚úÖ K√≠ch th∆∞·ªõc t·ªët nh·∫•t: {chessboard_size}")
    print(f"   üìç S·ªë corners: {len(corners)}")
    print(f"   üèÜ T·ªïng s·ªë k√≠ch th∆∞·ªõc t√¨m th·∫•y: {len(detected_results)}")
    print(f"   ‚è±Ô∏è  Th·ªùi gian nh·∫≠n di·ªán: {detection_time:.2f} gi√¢y")
    print(f"   üî¢ ƒê√£ th·ª≠ {i+1}/{len(possible_sizes)} k√≠ch th∆∞·ªõc")
    
    if len(detected_results) > 1:
        print("   üîç C√°c k√≠ch th∆∞·ªõc kh√°c ƒë∆∞·ª£c t√¨m th·∫•y:")
        for j, result in enumerate(detected_results[1:6]):  # Hi·ªÉn th·ªã top 5
            print(f"      {j+2}. {result['size']} ({result['total_corners']} corners)")
else:
    print("‚ùå Kh√¥ng t√¨m th·∫•y chessboard pattern n√†o")
    print("üí° Th·ª≠ ƒëi·ªÅu ch·ªânh √°nh s√°ng ho·∫∑c g√≥c ch·ª•p ·∫£nh")

if ret:
    print(f"‚úÖ Ph√°t hi·ªán ƒë∆∞·ª£c chessboard v·ªõi {len(corners)} corners")
    print(f"K√≠ch th∆∞·ªõc chessboard: {chessboard_size}")
    
    # Tinh ch·ªânh ƒë·ªô ch√≠nh x√°c c·ªßa corners
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
    corners_refined = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
    
    # V·∫Ω chessboard corners
    cv2.drawChessboardCorners(image_chessboard, chessboard_size, corners_refined, ret)
    
    # V·∫Ω 4 g√≥c c·ªßa chessboard v·ªõi m√†u s·∫Øc ƒë·∫∑c bi·ªát
    cols, rows = chessboard_size
    
    # X√°c ƒë·ªãnh 4 g√≥c c·ªßa chessboard
    corner_indices = [
        0,                      # Top-left
        cols - 1,               # Top-right  
        (rows - 1) * cols,      # Bottom-left
        rows * cols - 1         # Bottom-right
    ]
    
    corner_labels = ["Top-Left", "Top-Right", "Bottom-Left", "Bottom-Right"]
    corner_colors = [(0, 255, 0), (255, 0, 0), (0, 0, 255), (255, 255, 0)]  # Green, Blue, Red, Cyan
    
    print("üìç 4 G√≥c c·ªßa Chessboard:")
    corner_points = []
    
    for i, (idx, label, color) in enumerate(zip(corner_indices, corner_labels, corner_colors)):
        if idx < len(corners_refined):
            x, y = corners_refined[idx][0]
            corner_points.append((int(x), int(y)))
            
            # V·∫Ω circle l·ªõn cho 4 g√≥c
            cv2.circle(image_chessboard, (int(x), int(y)), 15, color, -1)
            # V·∫Ω border tr·∫Øng
            cv2.circle(image_chessboard, (int(x), int(y)), 15, (255, 255, 255), 3)
            # Th√™m text label
            cv2.putText(image_chessboard, str(i+1), (int(x-8), int(y+8)), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)
            print(f"  {i+1}. {label}: ({x:.1f}, {y:.1f})")
    
    # V·∫Ω ƒë∆∞·ªùng k·∫øt n·ªëi gi·ªØa 4 g√≥c t·∫°o th√†nh h√¨nh ch·ªØ nh·∫≠t
    if len(corner_points) == 4:
        # V·∫Ω 4 c·∫°nh c·ªßa h√¨nh ch·ªØ nh·∫≠t
        cv2.line(image_chessboard, corner_points[0], corner_points[1], (255, 255, 255), 3)  # Top
        cv2.line(image_chessboard, corner_points[1], corner_points[3], (255, 255, 255), 3)  # Right
        cv2.line(image_chessboard, corner_points[3], corner_points[2], (255, 255, 255), 3)  # Bottom
        cv2.line(image_chessboard, corner_points[2], corner_points[0], (255, 255, 255), 3)  # Left
        print("  ‚úì ƒê√£ v·∫Ω ƒë∆∞·ªùng k·∫øt n·ªëi gi·ªØa 4 g√≥c")
    
    # In t·ªça ƒë·ªô m·ªôt s·ªë corners ƒë·∫ßu ti√™n
    print("\nT·ªça ƒë·ªô m·ªôt s·ªë corners ƒë·∫ßu ti√™n:")
    for i in range(min(5, len(corners_refined))):
        x, y = corners_refined[i][0]
        print(f"  Corner {i}: ({x:.1f}, {y:.1f})")
    
    # L∆∞u ·∫£nh chessboard k·∫øt qu·∫£
    chessboard_output = 'chessboard_result.jpg'
    cv2.imwrite(chessboard_output, image_chessboard)
    print(f"ƒê√£ l∆∞u ·∫£nh chessboard k·∫øt qu·∫£ v√†o: {chessboard_output}")
    
else:
    print("‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c chessboard pattern")
    print("Th·ª≠ ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc chessboard_size ho·∫∑c ki·ªÉm tra ·∫£nh")

# ===================== L∆ØU K·∫æT QU·∫¢ T·ªîNG H·ª¢P =====================
# T·∫°o ·∫£nh k·∫øt h·ª£p c·∫£ ArUco v√† Chessboard
combined_image = np.hstack((image_with_markers, image_chessboard))

# L∆∞u ·∫£nh k·∫øt qu·∫£ ArUco
aruco_output = 'aruco_result.jpg'
cv2.imwrite(aruco_output, image_with_markers)
print(f"\nƒê√£ l∆∞u ·∫£nh ArUco k·∫øt qu·∫£ v√†o: {aruco_output}")

# L∆∞u ·∫£nh k·∫øt h·ª£p
combined_output = 'combined_result.jpg'
cv2.imwrite(combined_output, combined_image)
print(f"ƒê√£ l∆∞u ·∫£nh k·∫øt h·ª£p v√†o: {combined_output}")

# ===================== T√ìM T·∫ÆT K·∫æT QU·∫¢ =====================
print("\n" + "="*50)
print("T√ìM T·∫ÆT K·∫æT QU·∫¢ PH√ÅT HI·ªÜN")
print("="*50)
print(f"üìç ArUco Markers: {len(ids) if ids is not None else 0} markers")
if ids is not None and 0 in ids:
    print("   ‚úì Marker ID 0 ƒë∆∞·ª£c t√¨m th·∫•y")
    
if ret and chessboard_size:
    print(f"üèÅ Chessboard: K√≠ch th∆∞·ªõc {chessboard_size} ({len(corners)} corners)")
else:
    print("üèÅ Chessboard: Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c")
    
print(f"üìÅ Files ƒë∆∞·ª£c t·∫°o:")
print(f"   - {aruco_output}")
if ret:
    print(f"   - chessboard_result.jpg")
print(f"   - {combined_output}")
print("="*50)