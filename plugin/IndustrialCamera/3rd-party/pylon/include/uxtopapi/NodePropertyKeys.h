//-----------------------------------------------------------------------------
//  Copyright (c) 2012-2024 Basler AG
//-----------------------------------------------------------------------------
/**
 * \file
 * \brief defined NodePropertyIDs
 */

#pragma once

#include <stdint.h>


//  A PROPID is a packed 32 bit integer
//  laid out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +-------------------------------+---------------+-+-------------+
//  |      prop specific id         |               |A|   type      |
//  +-------------------------------+---------------+-+-------------+
//  A = Array indicator



// data types (7 bit)
#define NODEPROP_TYPE_INT32         1   ///< An int32_t type
#define NODEPROP_TYPE_UINT32        2   ///< An uint32_t type
#define NODEPROP_TYPE_INT64         3   ///< An int64_t type
#define NODEPROP_TYPE_UINT64        4   ///< An uint64_t type
#define NODEPROP_TYPE_DOUBLE        5   ///< A double type
#define NODEPROP_TYPE_STRING        6   ///< A string type

#define NODEPROP_TYPE_ARRAY         0x80    ///< An array type

// helper macros

/// Make a node property key out of type  and identifier.
#define MAKE_NODEPROP_KEY(ty_, id_)     ((topapi::PROPKEY)(((uint16_t)(((size_t)(id_)) & 0xffff) << 16) | ((uint32_t)((uint8_t)(((size_t)(ty_)) & 0xff)))))

/// Get the type from a node property key.
#define GET_NODEPROP_TYPE(id_)          ((unsigned int)(((topapi::PROPKEY)id_) & 0xff))

/// Get the identifier from a node property key.
#define GET_NODEPROP_ID(id_)            ((unsigned int)(((topapi::PROPKEY)id_) >> 16 & 0xffff))

/*

*** copy templates ***

#define NODEPROP_KEY_                      MAKE_NODEPROP_ID(NODEPROP_TYPE_INT32,  )
#define NODEPROP_KEY_                      MAKE_NODEPROP_ID(NODEPROP_TYPE_UINT32, )
#define NODEPROP_KEY_                      MAKE_NODEPROP_ID(NODEPROP_TYPE_INT64,  )
#define NODEPROP_KEY_                      MAKE_NODEPROP_ID(NODEPROP_TYPE_UINT64, )
#define NODEPROP_KEY_                      MAKE_NODEPROP_ID(NODEPROP_TYPE_DOUBLE, )
#define NODEPROP_KEY_                      MAKE_NODEPROP_ID(NODEPROP_TYPE_STRING, )

*/

// This property should exist for each node.
#define          NODEPROP_KEY_ID                                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          10)    ///< Unique ID to identify a node which must not change even when Refreshed.
#define          NODEPROP_KEY_CAPTION                                                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          11)    ///< Caption of the (device) node.

// Properties which can be related to arbitrary nodes.

#define          NODEPROP_KEY_NUMBEROFU3VDEVICESOFSUBTREE                              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          12)    ///< Number of USB3 Vision devices of subtree including the current device node.
#define          NODEPROP_KEY_NUMBEROFDEVICESOFCHILDSUBTREES                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          13)    ///< Number of devices of child subtrees.
#define          NODEPROP_KEY_ISUSB1DOT0                                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          14)    ///< If the device version number is 1.0, the value is set to 1, it is set to 0 otherwise.
#define          NODEPROP_KEY_ISUSB1DOT1                                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          15)    ///< If the device version number is 1.1, the value is set to 1, it is set to 0 otherwise.
#define          NODEPROP_KEY_ISUSB2DOT0                                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          16)    ///< If the device version number is 2.0, the value is set to 1, it is set to 0 otherwise.
#define          NODEPROP_KEY_ISUSB3DOTX                                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          17)    ///< If the device version number is 3.x, the value is set to 1, it is set to 0 otherwise.
#define          NODEPROP_KEY_ISDRIVERPRESENT                                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          18)    ///< If driver is present, value is 1. The value is 0 otherwise.
#define          NODEPROP_KEY_DEVICEINTERFACEPATH                                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          19)    ///< The interface path of the device.
#define          NODEPROP_KEY_SUPPORTEDUSBVERSIONSOFNEARESTHUBPORTS                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,    20)    ///< Supported USB versions of nearest hub ports.
#define          NODEPROP_KEY_SUPPORTEDUSBVERSIONSOFNEARESTHUBPORTSSTR                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,    21)    ///< Supported USB versions of nearest hub ports.
#define          NODEPROP_KEY_NUMBEROFNONHUBDEVICESSUBTREE                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          22)    ///< Number of non-hub devices of of child subtrees.
#define          NODEPROP_KEY_BANDWIDTHOFU3VDEVICESOFSUBTREE                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT64,                          23)    ///< The accumulated bandwidth of all U3V devices (Bytes/sec)


// Properties related to root node only.
#define          NODEPROP_KEY_ROOT_COMPUTERNAME                                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          50)   ///< The NetBIOS name of the local computer.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEXSTR                                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          51)   ///< A string with OSVERSIONINFOEX and product information of the operating system.
#define          NODEPROP_KEY_ROOT_SYSTEMINFO_PROCESSORARCHITECTURE                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          52)   ///< The processor architecture of the installed operating system. This member can be one of the following values: PROCESSOR_ARCHITECTURE_AMD64 (9), PROCESSOR_ARCHITECTURE_IA64 (6), PROCESSOR_ARCHITECTURE_INTEL (0), PROCESSOR_ARCHITECTURE_UNKNOWN (0xFFFF).
#define          NODEPROP_KEY_ROOT_SYSTEMINFO_ACTIVEPROCESSORMASK                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          53)   ///< A mask representing the set of processors configured into the system. Bit 0 is processor 0; bit 31 is processor 31.
#define          NODEPROP_KEY_ROOT_SYSTEMINFO_NUMBEROFPROCESSORS                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          54)   ///< The number of logical processors in the current group.
#define          NODEPROP_KEY_ROOT_SYSTEMINFO_PROCESSORLEVEL                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          55)   ///< The architecture-dependent processor level.
#define          NODEPROP_KEY_ROOT_SYSTEMINFO_PROCESSORREVISION                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          56)   ///< The architecture-dependent processor revision.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_MAJORVERSION                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          57)   ///< The major version number of the operating system.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_MINORVERSION                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          58)   ///< The minor version number of the operating system.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_BUILDNUMBER                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          59)   ///< The build number of the operating system.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_PLATFORMID                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          60)   ///< The operating system platform.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_CSDVERSION                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          61)   ///< A null-terminated string, such as \"Service Pack 3\", that indicates the latest Service Pack installed on the system. If no Service Pack has been installed, the string is empty.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_SERVICEPACKMAJOR                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          62)   ///< The major version number of the latest Service Pack installed on the system. For example, for Service Pack 3, the major version number is 3. If no Service Pack has been installed, the value is zero.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_SERVICEPACKMINOR                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          63)   ///< The minor version number of the latest Service Pack installed on the system. For example, for Service Pack 3, the minor version number is 0.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_SUITEMASK                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          64)   ///< A bit mask that identifies the product suites available on the system.
#define          NODEPROP_KEY_ROOT_OSVERSIONINFOEX_PRODUCTTYPE                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          65)   ///< Any additional information about the system. This member can be one of the following values: VER_NT_WORKSTATION (1), VER_NT_DOMAIN_CONTROLLER (2), VER_NT_SERVER (3).
#define          NODEPROP_KEY_ROOT_PRODUCTINFO                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          66)   ///< The product type for the operating system on the local computer: PRODUCT_BUSINESS (0x00000006), PRODUCT_BUSINESS_N (0x00000010), PRODUCT_CLUSTER_SERVER (0x00000012), PRODUCT_CLUSTER_SERVER_V (0x00000040), PRODUCT_CORE (0x00000065), PRODUCT_CORE_N (0x00000062), PRODUCT_CORE_COUNTRYSPECIFIC (0x00000063), PRODUCT_CORE_SINGLELANGUAGE (0x00000064), PRODUCT_DATACENTER_EVALUATION_SERVER (0x00000050), PRODUCT_DATACENTER_SERVER (0x00000008), PRODUCT_DATACENTER_SERVER_CORE (0x0000000C), PRODUCT_DATACENTER_SERVER_CORE_V (0x00000027), PRODUCT_DATACENTER_SERVER_V (0x00000025), PRODUCT_ENTERPRISE (0x00000004), PRODUCT_ENTERPRISE_E (0x00000046), PRODUCT_ENTERPRISE_N_EVALUATION (0x00000054), PRODUCT_ENTERPRISE_N (0x0000001B), PRODUCT_ENTERPRISE_EVALUATION (0x00000048), PRODUCT_ENTERPRISE_SERVER (0x0000000A), PRODUCT_ENTERPRISE_SERVER_CORE (0x0000000E), PRODUCT_ENTERPRISE_SERVER_CORE_V (0x00000029), PRODUCT_ENTERPRISE_SERVER_IA64 (0x0000000F), PRODUCT_ENTERPRISE_SERVER_V (0x00000026), PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT (0x0000003B), PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL (0x0000003C), PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC (0x0000003D), PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC (0x0000003E), PRODUCT_HOME_BASIC (0x00000002), PRODUCT_HOME_BASIC_E (0x00000043), PRODUCT_HOME_BASIC_N (0x00000005), PRODUCT_HOME_PREMIUM (0x00000003), PRODUCT_HOME_PREMIUM_E (0x00000044), PRODUCT_HOME_PREMIUM_N (0x0000001A), PRODUCT_HOME_PREMIUM_SERVER (0x00000022), PRODUCT_HOME_SERVER (0x00000013), PRODUCT_HYPERV (0x0000002A), PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT (0x0000001E), PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING (0x00000020), PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY (0x0000001F), PRODUCT_MULTIPOINT_STANDARD_SERVER (0x0000004C), PRODUCT_MULTIPOINT_PREMIUM_SERVER (0x0000004D), PRODUCT_PROFESSIONAL (0x00000030), PRODUCT_PROFESSIONAL_E (0x00000045), PRODUCT_PROFESSIONAL_N (0x00000031), PRODUCT_PROFESSIONAL_WMC (0x00000067), PRODUCT_SB_SOLUTION_SERVER_EM (0x00000036), PRODUCT_SERVER_FOR_SB_SOLUTIONS (0x00000033), PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM (0x00000037), PRODUCT_SERVER_FOR_SMALLBUSINESS (0x00000018), PRODUCT_SERVER_FOR_SMALLBUSINESS_V (0x00000023), PRODUCT_SERVER_FOUNDATION (0x00000021), PRODUCT_SB_SOLUTION_SERVER (0x00000032), PRODUCT_SMALLBUSINESS_SERVER (0x00000009), PRODUCT_SMALLBUSINESS_SERVER_PREMIUM (0x00000019), PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE (0x0000003F), PRODUCT_SOLUTION_EMBEDDEDSERVER (0x00000038), PRODUCT_STANDARD_EVALUATION_SERVER (0x0000004F), PRODUCT_STANDARD_SERVER (0x00000007), PRODUCT_STANDARD_SERVER_CORE (0x0000000D), PRODUCT_STANDARD_SERVER_V (0x00000024), PRODUCT_STANDARD_SERVER_CORE_V (0x00000028), PRODUCT_STANDARD_SERVER_SOLUTIONS (0x00000034), PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE (0x00000035), PRODUCT_STARTER (0x0000000B), PRODUCT_STARTER_E (0x00000042), PRODUCT_STARTER_N (0x0000002F), PRODUCT_STORAGE_ENTERPRISE_SERVER (0x00000017), PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE (0x0000002E), PRODUCT_STORAGE_EXPRESS_SERVER (0x00000014), PRODUCT_STORAGE_EXPRESS_SERVER_CORE (0x0000002B), PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER (0x00000060), PRODUCT_STORAGE_STANDARD_SERVER (0x00000015), PRODUCT_STORAGE_STANDARD_SERVER_CORE (0x0000002C), PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER (0x0000005F), PRODUCT_STORAGE_WORKGROUP_SERVER (0x00000016), PRODUCT_STORAGE_WORKGROUP_SERVER_CORE (0x0000002D), PRODUCT_UNDEFINED (0x00000000), PRODUCT_ULTIMATE (0x00000001), PRODUCT_ULTIMATE_E (0x00000047), PRODUCT_ULTIMATE_N (0x0000001C), PRODUCT_WEB_SERVER (0x00000011), PRODUCT_WEB_SERVER_CORE (0x0000001D).
#define          NODEPROP_KEY_ROOT_DRIVEREXISTS                                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          67)   ///< If driver file exists in the driver directory or driver store, value is 1. The value is 0 otherwise.
#define          NODEPROP_KEY_ROOT_ISDRIVERPRESENT                                     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          68)   ///< If driver is present in the system, value is 1. The value is 0 otherwise.
#define          NODEPROP_KEY_ROOT_NUMBEROFHOSTCONTROLLERS                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          69)   ///< Number of USB host controllers.

// Properties related to host controller nodes only.
#define          NODEPROP_KEY_HOSTCONTROLLER_DRIVERKEYNAME                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          100) ///< The IOCTL_GET_HOSTCONTROLLER_DRIVERKEY_NAME I/O control request retrieves the driver key name in the registry for a USB host controller driver. IOCTL_GET_HOSTCONTROLLER_DRIVERKEY_NAME is a user-mode I/O control request. This request targets the USB host controller (GUID_DEVINTERFACE_USB_HOST_CONTROLLER).
#define          NODEPROP_KEY_HOSTCONTROLLER_PCIVENDORID                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          101) ///< The vendor identifier that is associated with the host controller device.
#define          NODEPROP_KEY_HOSTCONTROLLER_PCIVENDORSTR                              MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          102) ///< The PCI vendor.
#define          NODEPROP_KEY_HOSTCONTROLLER_PCIDEVICEID                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          103) ///< The device identifier that is associated with the host controller.
#define          NODEPROP_KEY_HOSTCONTROLLER_PCIDEVICESTR                              MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          104) ///< The PCI device.
#define          NODEPROP_KEY_HOSTCONTROLLER_PCIREVISION                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          105) ///< The revision number of the host controller device.
#define          NODEPROP_KEY_HOSTCONTROLLER_NUMBEROFROOTPORTS                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          106) ///< The number of root hub ports that the host controller has.
#define          NODEPROP_KEY_HOSTCONTROLLER_CONTROLLERFLAVOUR                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          107) ///< A USB_CONTROLLER_FLAVOR-typed enumerator that specifies the type of controller.
#define          NODEPROP_KEY_HOSTCONTROLLER_CONTROLLERFLAVOURSTR                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                          108) ///< The ControllerFlavor, converted to string.
#define          NODEPROP_KEY_HOSTCONTROLLER_HCFEATUREFLAGS                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                          109) ///< A bitwise OR of some combination of the following host controller feature flags: USB_HC_FEATURE_FLAG_PORT_POWER_SWITCHING (0x1), USB_HC_FEATURE_FLAG_SEL_SUSPEND (0x2), USB_HC_FEATURE_LEGACY_BIOS (0x4).
#define          NODEPROP_KEY_HOSTCONTROLLER_MAXBANDWIDTH_LOWER_BOUND                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT64,                          110) /// lower bound of maximum bandwidth that can be yielded with that controller
#define          NODEPROP_KEY_HOSTCONTROLLER_MAXBANDWIDTH_UPPER_BOUND                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT64,                          111) /// upper bound of maximum bandwidth that can be yielded with that controller

#define          NODEPROP_KEY_CM_DEVNODE_STATUS                                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         198)    ///< Device status.
#define          NODEPROP_KEY_CM_DEVNODE_PROBLEMNUMBER                                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         199)    ///< Device problem code.
#define          NODEPROP_KEY_DRP_INSTALLSTATE                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         200)    ///< Device install state. CM_INSTALL_STATE_INSTALLED (0), CM_INSTALL_STATE_NEEDS_REINSTALL (1), CM_INSTALL_STATE_FAILED_INSTALL (2), CM_INSTALL_STATE_FINISH_INSTALL (3).
#define          NODEPROP_KEY_DRP_DEVICEDESC                                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         201)    ///< DeviceDesc REG_SZ property.
#define          NODEPROP_KEY_DRP_HARDWAREID                                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,   202)    ///< HardwareID REG_MULTI_SZ property.
#define          NODEPROP_KEY_DRP_SERVICE                                              MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         203)    ///< Service REG_SZ property.
#define          NODEPROP_KEY_DRP_CLASSGUID                                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         204)    ///< ClassGUID REG_SZ property.
#define          NODEPROP_KEY_DRP_DRIVER                                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         205)    ///< Driver REG_SZ property.
#define          NODEPROP_KEY_DRP_MFG                                                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         206)    ///< Mfg REG_SZ property.
#define          NODEPROP_KEY_DRP_FRIENDLYNAME                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         207)    ///< FriendlyName REG_SZ property.
#define          NODEPROP_KEY_DRP_LOCATION_INFORMATION                                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         208)    ///< LocationInformation REG_SZ property.
#define          NODEPROP_KEY_DRP_PHYSICAL_DEVICE_OBJECT_NAME                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         209)    ///< PhysicalDeviceObjectName REG_SZ property.

#define          NODEPROP_KEY_DRVINFO_DRIVERDATE                                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT64,                         210)    ///< Date of the driver. From the DriverVer entry in the INF file. The upper DWORD contains the dwHighDateTime, the lower contains the dwLowDateTime of the FILETIME structure.
#define          NODEPROP_KEY_DRVINFO_DRIVERDATE_SYSTEMTIME_STR                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         211)    ///< Date of the driver, system time.
#define          NODEPROP_KEY_DRVINFO_VERSION                                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT64,                         213)    ///< Version of the driver. From the DriverVer entry in the INF file. The 64 bit value is made up of 4 16 bit values: major, minor, build, revision.
#define          NODEPROP_KEY_DRVINFO_VERSIONSTR                                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         214)    ///< Version of the driver.

#define          NODEPROP_KEY_DEVICEINSTANCEID                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         225)    ///< The CM_Get_Device_ID function retrieves the device instance ID for a specified device instance on the local machine.
#define          NODEPROP_KEY_NODEINFORMATION_NODETYPE                                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         250)    ///< A USB_HUB_NODE enumerator that indicates whether the parent device is a hub or a non-hub composite device: UsbHub (0), UsbMIParent (1)

#define          NODEPROP_KEY_HUB_NAME                                                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         300)    ///< The IOCTL_USB_GET_NODE_CONNECTION_NAME I/O control request is used with the USB_NODE_CONNECTION_NAME structure to retrieve the symbolic link name of the hub that is attached to the downstream port.

#define          NODEPROP_KEY_HUB_DESCRIPTOR_DESCRIPTORTYPE                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         401)    ///< The descriptor type of the hub.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_NUMBEROFPORTS                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         402)    ///< The number of ports on the hub.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         403)    ///< The hub characteristics. For more information about this member, see Universal Serial Bus Specification.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_PORTPOWERSWITCHING        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         404)    ///< If logical power switching mode is set to individual power switching (all ports power at once), the value is set to 'Individual'. The value is set to 'Ganged' otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISRESERVED                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         406)    ///< If the reserved bit of logical power switching mode bits is set (used only on 1.0 compliant hubs that implement no power switching), the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISPARTOFACOMPOUNDDEVICE   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         407)    ///< If hub is part of a compound device, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_INDIVIDUALORGLOBAL_OVERCURRENTPROTECTION     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,      408)    ///< Global or individual over-current Protection. The hub reports over-current as a summation of all ports current draw, without a breakdown of individual port over-current status. If this mode is set, the value is set to 'Global'. The value is set to 'Individual' otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISNOOVERCURRENTPROTECTION MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         410)    ///< No Over-current Protection. This option is allowed only for bus-powered hubs that do not implement over-current protection. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST8FS     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         411)    ///< TT requires at most 8 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST16FS    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         412)    ///< TT requires at most 16 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST24FS    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         413)    ///< TT requires at most 24 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST32FS    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         414)    ///< TT requires at most 32 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CHARACTERISTICS_ISPORTINDICATORSSUPPORTED MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         415)    ///< Port Indicators are supported on its downstream facing ports and the PORT_INDICATOR request controls the indicators. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_POWERONTOPOWERGOOD                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         420)    ///< The time, in 2-millisecond intervals, that it takes the device to turn on completely. For more information about this member, see Universal Serial Bus Specification.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_CONTROLCURRENT                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         421)    ///< The maximum current requirements, in milliamperes, of the controller component of the hub.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_REMOVEANDPOWERMASK_NUMBEROFBYTES          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 ,                        422)    ///< Number of used bytes in bRemoveAndPowerMask array of USB_HUB_DESCRIPTOR structure.
#define          NODEPROP_KEY_HUB_DESCRIPTOR_REMOVEANDPOWERMASK                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,   423)    ///< Indicates if a port has a removable device attached. This field is reported on byte-granularity. Within a byte, if no port exists for a given location, the field representing the port characteristics returns 0. Bit value definition: 0B - Device is removable. 1B - Device is non-removable. This is a bitmap corresponding to the individual ports on the hub: Bit 0: Reserved for future use. Bit 1: port 1, bit 2: port 2 ... bit n: port n (implementation-dependent, up to maximum of 255 ports).

#define          NODEPROP_KEY_HUB_ISBUSPOWERED                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         424)    ///< A Boolean value that indicates whether the hub is bus-powered. TRUE, the hub is bus-powered; FALSE, the hub is self-powered.
#define          NODEPROP_KEY_HUB_IS2XCAPABLE                                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         425)    ///< If TRUE, the hub is capable of running at high speed.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISHIGHSPEEDCAPABLE                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         426)    ///< If TRUE, the hub is high speed-capable. This capability does not necessarily mean that the hub is operating at high speed.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISHIGHSPEED                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         427)    ///< If TRUE, the hub is high speed.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISMULTITTCAPABLE                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         428)    ///< If TRUE, the hub is capable of doing multiple transaction translations simultaneously.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISMULTITT                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         429)    ///< If TRUE, the hub is configured to perform multiple transaction translations simultaneously.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISROOT                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         430)    ///< If TRUE, the hub is the root hub.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISARMEDWAKEONCONNECT              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         431)    ///< If TRUE, the hub is armed to wake when a device is connected to the hub.
#define          NODEPROP_KEY_HUB_CAPABILITYFLAGS_HUBISBUSPOWERED                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         432)    ///< A boolean value that indicates whether the hub is bus-powered. TRUE, the hub is bus-powered; FALSE, the hub is self-powered.
#define          NODEPROP_KEY_HUB_CONNECTIONATTRIBUTES_CONNECTIONINDEX                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,   445)    ///< This member contains the number of the port.
#define          NODEPROP_KEY_HUB_CONNECTIONATTRIBUTES_CONNECTIONSTATUS                MAKE_NODEPROP_KEY(NODEPROP_TYPE_INT32 | NODEPROP_TYPE_ARRAY,    446)    ///< The ConnectionStatus indicates the status of the connection to a device on a USB hub port: NoDeviceConnected = 0, DeviceConnected = 1, DeviceFailedEnumeration = 2, DeviceGeneralFailure = 3, DeviceCausedOvercurrent = 4, DeviceNotEnoughPower = 5, DeviceNotEnoughBandwidth  = 6, DeviceHubNestedTooDeeply = 7, DeviceInLegacyHub = 8, DeviceEnumerating = 9, DeviceReset = 10.
#define          NODEPROP_KEY_HUB_CONNECTIONATTRIBUTES_CONNECTIONSTATUSSTR             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,   447)    ///< The ConnectionStatus enumerator, converted to a string.
#define          NODEPROP_KEY_HUB_CONNECTIONATTRIBUTES_PORTATTRIBUTES                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_INT32 | NODEPROP_TYPE_ARRAY,    448)    ///< On output from the IOCTL_USB_GET_NODE_CONNECTION_ATTRIBUTES I/O control request, this member contains the Microsoft-extended port attributes.
#define          NODEPROP_KEY_HUB_INFORMATIONEX_HUBTYPE                                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         450)    ///< The type of hub: root hub, USB 2.0, or USB 3.0 hub.
#define          NODEPROP_KEY_HUB_INFORMATIONEX_HUBTYPESTR                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         451)    ///< The type of hub, converted to string.
#define          NODEPROP_KEY_HUB_INFORMATIONEX_HIGHESTPORTNUMBER                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         452)    ///< Indicates the number of ports on the hub. The ports are numbered from 1 to HighestPortNumber, where HighestPortNumber is the highest valid port number on the hub.

#define          NODEPROP_KEY_HUB_30DESCRIPTOR_DESCRIPTORTYPE                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         453)    ///< The descriptor type of the USB 3.0 hub.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_NUMBEROFPORTS                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         454)    ///< The number of ports on the USB 3.0 hub.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         455)    ///< The USB 3.0 hub characteristics.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_PORTPOWERSWITCHING      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         456)    ///< If logical power switching mode of he USB 3.0 is set to individual power switching (all ports power at once), the value is set to 'Individual'. The value is set to 'Ganged' otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISRESERVED              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         457)    ///< If the reserved bit of logical power switching mode bits is set (used only on 1.0 compliant hubs that implement no power switching), the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISPARTOFACOMPOUNDDEVICE MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         458)    ///< If USB 3.0 hub is part of a compound device, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_INDIVIDUALORGLOBAL_OVERCURRENTPROTECTION    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,     459)    ///< Global or individual over-current Protection of the USB 3.0 hub. The hub reports over-current as a summation of all ports current draw, without a breakdown of individual port over-current status. If this mode is set, the value is set to 'Global'. The value is set to 'Individual' otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISNOOVERCURRENTPROTECTION   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                     460)    ///< No Over-current Protection. This option is allowed only for bus-powered hubs that do not implement over-current protection. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST8FS   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         461)    ///< TT requires at most 8 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST16FS  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         462)    ///< TT requires at most 16 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST24FS  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         463)    ///< TT requires at most 24 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISTTREQUIRESATMOST32FS  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         464)    ///< TT requires at most 32 FS bit times of inter transaction gap on a full-/low-speed downstream bus. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CHARACTERISTICS_ISPORTINDICATORSSUPPORTED   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                     465)    ///< Port Indicators are supported on its downstream facing ports and the PORT_INDICATOR request controls the indicators. If this mode is set, the value is set to 1. The value is set to 0 otherwise.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_POWERONTOPOWERGOOD                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         470)    ///< The time, in 2-millisecond intervals, that it takes the device to turn on completely. For more information about this member, see Universal Serial Bus Specification.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_CONTROLCURRENT                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         471)    ///< The maximum current requirements, in milliamperes, of the controller component of the hub.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_HUBHDRDECLAT                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         472)    ///< The USB 3.0 hub packet header decode latency.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_HUBDELAY                                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         473)    ///< The average delay, in nanoseconds, that is introduced by the USB 3.0 hub.
#define          NODEPROP_KEY_HUB_30DESCRIPTOR_DEVICEREMOVABLE                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         474)    ///< Indicates for each port whether a removable device is attached.

#define          NODEPROP_KEY_PORTINDEX                                                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         484)    ///< The index of the hub port the device is connected to. The index is one based: 1 <= portIndex <= bNumberOfPorts, see USB_HUB_DESCRIPTOR, bNumberOfPorts.

#define          NODEPROP_KEY_HUB_NUMBEROFPORTS_STATUSCONNECTED                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         485)    ///< The number of ports on the hub to which a device is connected.
#define          NODEPROP_KEY_HUB_NUMBEROFPORTS_STATUSCAUSEDOVERCURRENT                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         486)    ///< The number of ports on the hub for which a device caused overcurrent.

#define          NODEPROP_KEY_CONNECTIONINDEXANDSTATUS_CONNECTIONINDEX                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,   495)    ///< Array of connection indexes.
#define          NODEPROP_KEY_CONNECTIONINDEXANDSTATUS_CONNECTIONSTATUS                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,   496)    ///< Array of connection stati.
#define          NODEPROP_KEY_CONNECTIONINDEXANDSTATUS_CONNECTIONSTATUSSTR             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,   497)    ///< Array of connection stati strings.

#define          NODEPROP_KEY_CONNECTIONINFORMATION_CURRENTCONFIGURATIONVALUE          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         600)    ///< The value that is used with the SetConfiguration request to specify that current configuration of the device that is connected to the indicated port. For more information about this member, see Universal Serial Bus Specification.
#define          NODEPROP_KEY_CONNECTIONINFORMATION_LOWSPEED                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         601)    ///< A Boolean value that indicates whether the port and its connected device are operating at low speed. TRUE indicates that the port and its connected device are currently operating at a low speed. FALSE indicates otherwise.
#define          NODEPROP_KEY_CONNECTIONINFORMATION_DEVICEISHUB                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         602)    ///< A Boolean value that indicates if the device that is attached to the port is a hub. If TRUE, the device that is attached to the port is a hub. If FALSE, the device is not a hub.
#define          NODEPROP_KEY_CONNECTIONINFORMATION_DEVICEADDRESS                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         603)    ///< The USB-assigned, bus-relative address of the device that is attached to the port.
#define          NODEPROP_KEY_CONNECTIONINFORMATION_NUMBEROFOPENPIPES                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         604)    ///< The number of open USB pipes that are associated with the port.
#define          NODEPROP_KEY_CONNECTIONINFORMATIONEX_SPEED                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         700)    ///< Contains a value of type USB_DEVICE_SPEED that indicates the speed of the device.
#define          NODEPROP_KEY_CONNECTIONINFORMATIONEX_SPEEDSTR                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                         701)    ///< The USB_CONNECTION_STATUS enumerator, converted to a string.

#define          NODEPROP_KEY_CONNECTIONINFORMATIONEXV2_SUPPORTEDUSBPROTOCOLS          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         710)    ///< The USB signaling protocols that are supported by the port.
#define          NODEPROP_KEY_CONNECTIONINFORMATIONEXV2_SUPPORTEDUSBPROTOCOLSSTR       MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,   711)    ///< Array of strings which represent the USB signaling protocols that are supported by the port.
#define          NODEPROP_KEY_CONNECTIONINFORMATIONEXV2_FLAGS                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         712)    ///< A bitmask that indicates the properties and capabilities of the attached device or port.
#define          NODEPROP_KEY_CONNECTIONINFORMATIONEXV2_DEVICEISOPERATINGATSUPERSPEEDORHIGHER  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                 713)    ///< If TRUE, the attached device is currently operating at SuperSpeed or a higher speed that is defined by the official USB specification.
#define          NODEPROP_KEY_CONNECTIONINFORMATIONEXV2_DEVICEISSUPERSPEEDCAPABLEORHIGHER      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                 714)    ///< If TRUE, the attached device is a USB 3.0 device and is capable of operating at SuperSpeed or a higher speed that is defined by the official USB specification.

#define          NODEPROP_KEY_MIPARENTINFORMATION_NUMBEROFINTERFACES                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                         800)    ///< The number of interfaces on the composite device.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_BCDUSB                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1000)    ///< Identifies the version of the USB specification that this descriptor structure complies with. This value is a binary-coded decimal number.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_BCDUSBSTR                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        1001)    ///< The bcdUSB, converted to string.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_DEVICECLASS                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1002)    ///< Specifies the class code of the device as assigned by the USB specification group.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_DEVICESUBCLASS                     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1003)    ///< Specifies the subclass code of the device as assigned by the USB specification group.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_DEVICEPROTOCOL                     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1004)    ///< Specifies the protocol code of the device as assigned by the USB specification group.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_MAXPACKETSIZE0                     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1005)    ///< Specifies the maximum packet size, in bytes, for endpoint zero of the device. The value must be set to 8, 16, 32, or 64.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_IDVENDOR                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1006)    ///< Specifies the vendor identifier for the device as assigned by the USB specification committee.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_VENDORSTR                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        1007)    ///< The vendor.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_IDPRODUCT                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1008)    ///< Specifies the product identifier. This value is assigned by the manufacturer and is device-specific.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_BCDDEVICE                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1009)    ///< Identifies the version of the device. This value is a binary-coded decimal number.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_BCDDEVICESTR                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        1010)    ///< The bcdDevice, converted to string.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_IMANUFACTURER                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1011)    ///< Specifies a device-defined index of the string descriptor that provides a string containing the name of the manufacturer of this device.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_MANUFACTURERSTR                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        1012)    ///< Manufacturer, specified by iManufacturer (device descriptor) and set of string descriptors.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_IPRODUCT                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1013)    ///< Specifies a device-defined index of the string descriptor that provides a string that contains a description of the device.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_PRODUCTSTR                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        1014)    ///< Product, specified by iProduct (device descriptor) and set of string descriptors.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_ISERIALNUMBER                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1015)    ///< Specifies a device-defined index of the string descriptor that provides a string that contains a manufacturer-determined serial number for the device.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_NUMCONFIGURATIONS                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        1016)    ///< Specifies the total number of possible configurations for the device.

//
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_NUMINTERFACES               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2000)    ///< Specifies the total number of interfaces supported by this configuration.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_BCONFIGURATIONVALUE         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2001)    ///< Contains the value that is used to select a configuration. This value is passed to the USB SetConfiguration request , as described in version 1.1 of the Universal Serial Bus Specification. The port driver does not currently expose a service that allows higher-level drivers to set the configuration.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_ICONFIGURATION              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2002)    ///< Specifies the device-defined index of the string descriptor for this configuration.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_BMATTRIBUTES                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2003)    ///< Specifies a bitmap to describe behavior of this configuration. The bits are described and set in little-endian order. Bit 0-4: Reserved. 5: The configuration supports remote wakeup. 6: The configuration is self-powered and does not use power from the bus. 7: The configuration is powered by the bus.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_BMATTRIBUTESSTR             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2004)    ///< USB_CONFIGURATION_DESCRIPTOR bmAttributes, converted to string.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_BMATTRIBUTES_REMOTEWAKEUPSUPPORTED  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                2005)    ///< Remote wakeup is supported.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_BMATTRIBUTES_ISSELFPOWERED   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                       2006)    ///< Is self powered.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_BMATTRIBUTES_ISBUSPOWERED    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                       2007)    ///< Is bus powered.
#define          NODEPROP_KEY_USB_CONFIGURATION_DESCRIPTOR_MAXPOWER                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2008)    ///< Maximum power consumption of the device from the bus in this specific configuration when the device is fully operational. Expressed in 2-mA units when the device is operating in high-speed mode and in 8-mA units when operating in SuperSpeed mode. (i.e., 50 = 100 mA in high-speed mode and 50 = 400 mA in SuperSpeed mode).
#define          NODEPROP_KEY_MAXPOWERMA                                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2009)    ///< Maximum power consumption in mA.
#define          NODEPROP_KEY_USB_NUMBEROFHIDDESCRIPTORS                               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2100)    ///< Number of human interface device descriptors.
#define          NODEPROP_KEY_USB_HID_DESCRIPTOR_BCDHID                                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2101)    ///< The HID specification release number.
#define          NODEPROP_KEY_USB_HID_DESCRIPTOR_BCDHIDSTR                             MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2102)    ///< The bcdHID, converted to string.
#define          NODEPROP_KEY_USB_HID_DESCRIPTOR_BCOUNTRYCODE                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2103)    ///< The country code value.
#define          NODEPROP_KEY_USB_HID_DESCRIPTOR_NUMDESCRIPTORS                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2104)    ///< Number of descriptors.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_BDESCRIPTORTYPE               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2200)    ///< Value of bDescriptorType of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_BDESCRIPTORSUBTYPE            MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2201)    ///< Value of bDescriptorSubType of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_BGENCPVERSION                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2202)    ///< Value of bGenCPVersion of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_BU3VVERSION                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2203)    ///< Value of bU3VVersion of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IDEVICEGUID                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2204)    ///< Value of iDeviceGUID of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IVENDORNAME                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2205)    ///< Value of iVendorName of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IMODELNAME                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2206)    ///< Value of iModelName of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IFAMILYNAME                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2207)    ///< Value of iFamilyName of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IDEVICEVERSION                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2208)    ///< Value of iDeviceVersion of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IMANUFACTURERINFO             MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2209)    ///< Value of iManufacturerInfo of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_ISERIALNUMBER                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2210)    ///< Value of iSerialNumber of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_IUSERDEFINEDNAME              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2211)    ///< Value of iUserDefinedName of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_SPEEDSUPPORT                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2212)    ///< Value of bmSpeedSupport of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_CAMERA_INFO_DESCRIPTOR_SPEEDSUPPORTSTR               MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,  2213)    ///< The strings defined by bmSpeedSupport of structure USB_CAMERA_INFO_DESCRIPTOR.
#define          NODEPROP_KEY_USB_NUMBEROFINTERFACEASSOCIATIONDESCRIPTORS              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2300)    ///< Number of interface association descriptors.
#define          NODEPROP_KEY_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_BFIRSTINTERFACE     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2301)    ///< Value of bFirstInterface of structure USB_INTERFACE_ASSOCIATION_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_BINTERFACECOUNT     MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2302)    ///< Value of bInterfaceCount of structure USB_INTERFACE_ASSOCIATION_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_BFUNCTIONCLASS      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2303)    ///< Value of bFunctionClass of structure USB_INTERFACE_ASSOCIATION_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_BFUNCTIONSUBCLASS   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2304)    ///< Value of bFunctionSubClass of structure USB_INTERFACE_ASSOCIATION_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_BFUNCTIONPROTOCOL   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2305)    ///< Value of bFunctionProtocol of structure USB_INTERFACE_ASSOCIATION_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_IFUNCTION           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2306)    ///< Value of iFunction of structure USB_INTERFACE_ASSOCIATION_DESCRIPTOR.
#define          NODEPROP_KEY_USB_NUMBEROFINTERFACEDESCRIPTORS                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2400)    ///< Number of interface descriptors.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_BINTERFACENUMBER                MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2402)    ///< The index number of the interface.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_BALTERNATESETTING               MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2403)    ///< The index number of the alternate setting of the interface.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_BNUMENDPOINTS                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2404)    ///< The number of endpoints that are used by the interface, excluding the default status endpoint.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_BINTERFACECLASS                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2405)    ///< Value of bInterfaceClass of structure USB_INTERFACE_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_BINTERFACESUBCLASS              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2406)    ///< Value of bInterfaceSubClass of structure USB_INTERFACE_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_BINTERFACEPROTOCOL              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2407)    ///< Value of bInterfaceProtocol of structure USB_INTERFACE_DESCRIPTOR.
#define          NODEPROP_KEY_USB_INTERFACE_DESCRIPTOR_IINTERFACE                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2408)    ///< Value of iInterface of structure USB_INTERFACE_DESCRIPTOR.
#define          NODEPROP_KEY_USB_NUMBEROFLANGUAGEIDS                                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2500)    ///< Number of language identifiers.
#define          NODEPROP_KEY_USB_LANGUAGEIDS                                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY,  2501)    ///< Language identifiers given by string descriptor.
#define          NODEPROP_KEY_CAMERA_INFO_DESCRIPTOR_MODELNAME                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2600)    ///< Model name, specified by iModelName (camera info descriptor) and set of string descriptors.
#define          NODEPROP_KEY_CAMERA_INFO_DESCRIPTOR_VENDORNAME                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2601)    ///< Vendor name, specified by iVendorName (camera info descriptor) and set of string descriptors.
#define          NODEPROP_KEY_CAMERA_INFO_DESCRIPTOR_MANUFACTURERINFO                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2602)    ///< Manufacturer info, specified by iManufacturerInfo (camera info descriptor) and set of string descriptors.
#define          NODEPROP_KEY_CAMERA_INFO_DESCRIPTOR_USERDEFINEDNAME                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2603)    ///< User defined name, specified by iUserDefinedName (camera info descriptor) and set of string descriptors.
#define          NODEPROP_KEY_CAMERA_INFO_DESCRIPTOR_SERIALNUMBER                      MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2604)    ///< Serial number (camera info descriptor), specified by iSerialNumber (camera info descriptor) and set of string descriptors.
#define          NODEPROP_KEY_USB_DEVICE_DESCRIPTOR_SERIALNUMBER                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2605)    ///< Serial number (device descriptor), specified by iSerialNumber (device descriptor) and set of string descriptors.
#define          NODEPROP_KEY_CAMERA_INFO_DESCRIPTOR_DEVICEGUID                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2606)    ///< Device GUID, specified by iDeviceGUID (camera info descriptor) and set of string descriptors.
#define          NODEPROP_KEY_DEVICEINSTANCEPATH                                       MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2652)    ///< Device instance path.
#define          NODEPROP_KEY_DEV_DRIVERKEYNAME                                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING,                        2700)    ///< The IOCTL_GET_HOSTCONTROLLER_DRIVERKEY_NAME I/O control request retrieves the driver key name in the registry for a USB host controller driver. IOCTL_GET_HOSTCONTROLLER_DRIVERKEY_NAME is a user-mode I/O control request. This request targets the USB host controller (GUID_DEVINTERFACE_USB_HOST_CONTROLLER).
#define          NODEPROP_KEY_STRING_DESCRIPTOR_PREFERRED                              MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,  2800)    ///< The strings defined by preferred language ID and set of string descriptors.
#define          NODEPROP_KEY_ISDEVICEREMOVABLE                                        MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2810)    ///< If the device is removable, the value is true, false otherwise. This informaion is derived from the hub the device is connected to.

#define          NODEPROP_KEY_DRP_DEVICEDESC_ARRAY                                     MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY,  2900)    ///< Array of DeviceDesc REG_SZ property.

#define          NODEPROP_KEY_IS_BASLER_CAMERA                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2950)    ///< The value is 1 if U3V device is basler camera, 0 otherwise.
#define          NODEPROP_KEY_IS_BUFFERED_TRANSFER_DEVICE                              MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32,                        2951)    ///< The value is 1 if the device uses the buffered transfer mode, 0 otherwise

// ...
#define          NODEPROP_ID_WARNINGS_AND_MESSAGES_FIRST 65528 ///< Warnings, errors and their message texts begin at this value.
#define          NODEPROP_KEY_INTERNAL_WARNING_MESSAGE                                 MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY, 65528)    ///< Array of internal warning messages (an optional message for details) which are related to the current node. The i-th message belongs to the i-th entry of the internal warning array.
#define          NODEPROP_KEY_INTERNAL_WARNING                                         MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY, 65529)    ///< Array of internal warnings (language independent error code) which are related to the current node.
#define          NODEPROP_KEY_INTERNAL_ERROR_MESSAGE                                   MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY, 65530)    ///< Array of internal error messages (an optional message for details) which are related to the current node. The i-th message belongs to the i-th entry of the internal error array.
#define          NODEPROP_KEY_INTERNAL_ERROR                                           MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY, 65531)    ///< Array of internal errors (language independent error code) which are related to the current node.
#define          NODEPROP_KEY_WARNING_MESSAGE                                          MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY, 65532)    ///< Array of warning messages (an optional message for details) which are related to the current node. The i-th message belongs to the i-th entry of the warning array.
#define          NODEPROP_KEY_WARNING                                                  MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY, 65533)    ///< Array of warnings (language independent error code) which are related to the current node.
#define          NODEPROP_KEY_ERROR_MESSAGE                                            MAKE_NODEPROP_KEY(NODEPROP_TYPE_STRING | NODEPROP_TYPE_ARRAY, 65534)    ///< Array of error messages (an optional message for details) which are related to the current node. The i-th message belongs to the i-th entry of the error array.
#define          NODEPROP_KEY_ERROR                                                    MAKE_NODEPROP_KEY(NODEPROP_TYPE_UINT32 | NODEPROP_TYPE_ARRAY, 65535)    ///< Array of errors (language independent error code) which are related to the current node.
